version: 2.1
orbs:
  shellcheck: circleci/shellcheck@1
commands:
  rubocop:
    description: Lint Ruby sources with RuboCop
    parameters:
      target:
        type: string
    steps:
      - restore_cache:
          keys:
            - ruby-bundler-v2-extn-{{ checksum "<< parameters.target >>/Gemfile.lock" }}
      - run:
          name: Bundle Install
          working_directory: << parameters.target >>
          command: bundle install --path "$HOME/vendor/$LOCKFILE_CHECKSUM"
          environment:
            LOCKFILE_CHECKSUM: "{{ checksum '<< parameters.target >>/Gemfile.lock' }}"
      - run:
          name: Lint Ruby With RuboCop
          working_directory: << parameters.target >>
          command: |
            bundle exec rubocop --version
            bundle exec rubocop
      - save_cache:
          key: ruby-bundler-v2-extn-{{ checksum "<< parameters.target >>/Gemfile.lock" }}
          paths:
            - ~/vendor/{{ checksum "<< parameters.target >>/Gemfile.lock" }}
jobs:
  rust:
    docker:
      - image: circleci/rust:latest
    steps:
      - checkout
      - restore_cache:
          key: rust-cargo-v2-{{ checksum "Cargo.lock" }}
      - run:
          name: Install Rust Toolchain
          command: |
            rustup toolchain install "$(cat rust-toolchain)"
            rustup component add rustfmt
            rustup component add clippy
            rustc --version --verbose
            cargo --version --verbose
            rustfmt --version
            cargo clippy -- --version
      - run:
          # https://github.com/mruby/mruby/blob/master/doc/guides/compile.md#prerequisites
          name: Install mruby Build Dependencies
          command: |
            sudo apt-get install -y binutils bison gperf ruby-full
            bison --version
            gperf --version
            ruby --version
      - run:
          # needed for cc crate in build.rs
          name: Install mruby-sys Build Dependencies
          command: |
            sudo apt-get install -y clang
            clang --version
      - run:
          name: Build Workspace
          command: |
            cargo build
      - run:
          name: Test Workspace
          command: cargo test --all-features
          environment:
            RUST_BACKTRACE: 1
      - run:
          name: Format Rust Sources
          command: |
            rustfmt --version
            cargo fmt -- --check --color=auto
      - run:
          name: Lint Rust With Clippy
          command: |
            cargo clippy -- --version
            cargo clippy --all-targets --all-features
      - run:
          name: Check Docs
          command: |
            cargo doc --no-deps --all
          environment:
            RUSTDOCFLAGS: "-Z unstable-options --enable-index-page"
      - run:
          name: ruby/spec Compliance Regression Test
          command: |
            ./scripts/spec-compliance.sh
      - save_cache:
          key: rust-cargo-v2-{{ checksum "Cargo.lock" }}
          paths:
            - "~/.cargo"
            - "./target"
      - persist_to_workspace:
          root: target
          paths:
            - doc
  c:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - restore_cache:
          key: c-yarn-v2-{{ checksum "yarn.lock" }}
      - run:
          name: Yarn Install
          command: yarn install
      - save_cache:
          key: c-yarn-v2-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - node_modules
      - run:
          name: Format C Sources
          command: ./scripts/format-c.sh --check
  ruby:
    docker:
      - image: circleci/ruby:2.6.3
    steps:
      - checkout
      - run:
          name: Install bundler 2
          command: sudo gem install bundler
      - rubocop:
          target: ./mruby/src/extn
      - rubocop:
          target: ./mruby-bin/ruby
      - rubocop:
          target: ./spec-runner/src
      - rubocop:
          target: ./nemesis/ruby
      - rubocop:
          target: ./foolsgold/ruby
      - rubocop:
          target: ./hubris/src
  js:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - restore_cache:
          key: js-yarn-v2-{{ checksum "yarn.lock" }}
      - run: yarn install
      - save_cache:
          key: js-yarn-v2-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - node_modules
      - run:
          name: yarn check
          command: |
            yarn check --integrity
            yarn check --verify-tree
      - run:
          name: Lint JavaScript with eslint
          command: yarn run eslint --ext .html,.js .
  shell-format:
    docker:
      - image: peterdavehello/shfmt:latest
    steps:
      - checkout
      - run:
          name: Format Shell Sources
          command: |
            shfmt -version
            shfmt -f . | grep -v target/ | grep -v node_modules/ | grep -v vendor/ | xargs shfmt -i 2 -ci -s -w
  text:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - restore_cache:
          key: text-yarn-v2-{{ checksum "yarn.lock" }}
      - run: yarn install
      - save_cache:
          key: text-yarn-v2-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - node_modules
      - run:
          name: Format Text Sources
          command: |
            ./scripts/format-text.sh --check "css"
            ./scripts/format-text.sh --check "html"
            ./scripts/format-text.sh --check "js"
            ./scripts/format-text.sh --check "json"
            ./scripts/format-text.sh --check "yaml"
            ./scripts/format-text.sh --check "yml"
            ./scripts/format-text.sh --check "md"
  docs-deploy:
    docker:
      - image: node:8.10.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "23:28:57:b8:bc:d6:23:9f:bc:f3:68:56:29:90:68:c4"
      - attach_workspace:
          at: target
      - restore_cache:
          key: docs-yarn-v1-{{ checksum "yarn.lock" }}
      - run: yarn install
      - save_cache:
          key: docs-yarn-v1-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - node_modules
      - run:
          name: Configure git
          command: |
            git config user.email "ci-build@hyperbo.la"
            git config user.name "ci-build"
      - run:
          name: Deploy docs to gh-pages branch
          command: yarn run gh-pages --message "[skip ci] generate docs" --dist target/doc
workflows:
  version: 2
  build:
    jobs:
      - rust
      - c
      - ruby
      - js
      - shell-format
      - shellcheck/check:
          # we should also exclude "vendor" here but shellcheck/check exclude
          # only support a single exclude path.
          exclude: ./spec-runner/spec/*
      - text
      - docs-deploy:
          requires:
            - rust
          filters:
            branches:
              only: master
